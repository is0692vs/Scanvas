name: 'Release'

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install frontend dependencies
        run: |
          cd Scanvas
          npm install

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './Scanvas/src-tauri -> target'

      # PyInstaller でバイナリを生成
      - name: Build Python binary with PyInstaller
        run: |
          cd backend
          pip install pyinstaller psutil netifaces
          pyinstaller --onefile --name data_formatter data_formatter.py
        shell: bash

      # プラットフォーム別にバイナリを配置
      - name: Copy Python binary to Tauri binaries directory
        run: |
          mkdir -p Scanvas/src-tauri/binaries
          if [ "${{ matrix.platform }}" == "macos-latest" ]; then
            cp backend/dist/data_formatter Scanvas/src-tauri/binaries/data_formatter-aarch64-apple-darwin
          elif [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            cp backend/dist/data_formatter Scanvas/src-tauri/binaries/data_formatter-x86_64-unknown-linux-gnu
          elif [ "${{ matrix.platform }}" == "windows-latest" ]; then
            cp backend/dist/data_formatter.exe Scanvas/src-tauri/binaries/data_formatter-x86_64-pc-windows-msvc.exe
          fi
        shell: bash

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Scanvas App ${{ github.ref_name }}'
          releaseBody: 'See the assets to download this version.'
          releaseDraft: true
          prerelease: false
          projectPath: './Scanvas'
